import type { CharacterRarityKey } from './types';

/**
 * Regular expression for matching rarity text and symbols.
 *
 * ```js
 * CHARACTER_RARITY_REGEX.test('s·¥ò·¥á·¥Ñ…™·¥Ä ü'); // true
 * CHARACTER_RARITY_REGEX.test('Œõ'); // true
 * ```
 */
export const CHARACTER_RARITY_REGEX = (() => {
    const str = [
        'Œ±',
        'Œ≤',
        'Œ≥',
        'Œ¥',
        'Œµ',
        // Put ultra before zeta otherwise ultra symbol can match zeta symbol
        'Œ∂ùì°',
        'Œ∂',
        '‚Ä†',
        'ŒæŒΩ',
        'Œõ',
        '·¥Ä ü·¥ò ú·¥Ä',
        ' ô·¥á·¥õ·¥Ä',
        '…¢·¥Ä·¥ç·¥ç·¥Ä',
        '·¥Ö·¥á ü·¥õ·¥Ä',
        '·¥á·¥òs…™ ü·¥è…¥',
        '·¥¢·¥á·¥õ·¥Ä',
        '·¥ú ü·¥õ Ä·¥Ä',
        's·¥Ñ·¥Ä Ä ü·¥á·¥õ',
        '·¥á·¥†·¥á…¥·¥õ',
        's·¥ò·¥á·¥Ñ…™·¥Ä ü',
    ].join('|');

    return new RegExp(`(${str})`, 'u');
})();

const mappings: Map<string, CharacterRarityKey> = new Map();
mappings
    .set('·¥Ä ü·¥ò ú·¥Ä', 'ALPHA')
    .set(' ô·¥á·¥õ·¥Ä', 'BETA')
    .set('…¢·¥Ä·¥ç·¥ç·¥Ä', 'GAMMA')
    .set('·¥Ö·¥á ü·¥õ·¥Ä', 'DELTA')
    .set('·¥á·¥òs…™ ü·¥è…¥', 'EPSILON')
    .set('·¥¢·¥á·¥õ·¥Ä', 'ZETA')
    .set('·¥ú ü·¥õ Ä·¥Ä', 'ULTRA')
    .set('s·¥Ñ·¥Ä Ä ü·¥á·¥õ', 'SCARLET')
    .set('·¥á·¥†·¥á…¥·¥õ', 'EVENT')
    .set('s·¥ò·¥á·¥Ñ…™·¥Ä ü', 'SPECIAL')
    .set('Œ±', 'ALPHA')
    .set('Œ≤', 'BETA')
    .set('Œ≥', 'GAMMA')
    .set('Œ¥', 'DELTA')
    .set('Œµ', 'EPSILON')
    .set('Œ∂', 'ZETA')
    .set('Œ∂ùì°', 'ULTRA')
    .set('‚Ä†', 'SCARLET')
    .set('ŒæŒΩ', 'EVENT')
    .set('Œõ', 'SPECIAL');

/**
 * Resolves the query with the corresponding Rarity.
 *
 * @param query The query to resolve
 * @returns The corresponding Rarity, 'UNKNOWN' otherwise
 */
export function resolveCharacterRarity(query: string): CharacterRarityKey {
    return mappings.get(query) ?? 'UNKNOWN';
}
