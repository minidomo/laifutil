/** Contains the text and symbol for a rarity. */
export interface Rarity {
    /** The name of the rarity in latin letter small capitals. */
    TEXT: string;
    /** The symbols used to represent the rarity. */
    SYMBOL: string;
    /** A numerical value to represent the rarity */
    VALUE?: number;
}

/** Container for all rarities. */
export interface RarityContainer {
    ALPHA: Rarity & { VALUE: number };
    BETA: Rarity & { VALUE: number };
    GAMMA: Rarity & { VALUE: number };
    DELTA: Rarity & { VALUE: number };
    EPSILON: Rarity & { VALUE: number };
    ZETA: Rarity & { VALUE: number };
    ULTRA: Rarity & { VALUE: number };
    SCARLET: Rarity & { VALUE: number };
    EVENT: Rarity & { VALUE: number };
    SPECIAL: Rarity & { VALUE: number };
}

/** Constants for all rarities in LaifuBot. */
export const RarityConstants: RarityContainer = {
    ALPHA: {
        TEXT: '·¥Ä ü·¥ò ú·¥Ä',
        SYMBOL: 'Œ±',
        VALUE: 0,
    } as const,
    BETA: {
        TEXT: ' ô·¥á·¥õ·¥Ä',
        SYMBOL: 'Œ≤',
        VALUE: 1,
    } as const,
    GAMMA: {
        TEXT: '…¢·¥Ä·¥ç·¥ç·¥Ä',
        SYMBOL: 'Œ≥',
        VALUE: 2,
    } as const,
    DELTA: {
        TEXT: '·¥Ö·¥á ü·¥õ·¥Ä',
        SYMBOL: 'Œ¥',
        VALUE: 3,
    } as const,
    EPSILON: {
        TEXT: '·¥á·¥òs…™ ü·¥è…¥',
        SYMBOL: 'Œµ',
        VALUE: 4,
    } as const,
    ZETA: {
        TEXT: '·¥¢·¥á·¥õ·¥Ä',
        SYMBOL: 'Œ∂',
        VALUE: 5,
    } as const,
    ULTRA: {
        TEXT: '·¥ú ü·¥õ Ä·¥Ä',
        SYMBOL: 'Œ∂ùì°',
        VALUE: 6,
    } as const,
    SCARLET: {
        TEXT: 's·¥Ñ·¥Ä Ä ü·¥á·¥õ',
        SYMBOL: '‚Ä†',
        VALUE: 7,
    } as const,
    EVENT: {
        TEXT: '·¥á·¥†·¥á…¥·¥õ',
        SYMBOL: 'ŒæŒΩ',
        VALUE: 8,
    } as const,
    SPECIAL: {
        TEXT: 's·¥ò·¥á·¥Ñ…™·¥Ä ü',
        SYMBOL: 'Œõ',
        VALUE: 9,
    } as const,
};

function createRegex(): RegExp {
    // Sort to look at longer symbols first due to similarity with zeta and ultra symbols
    const baseExp = Object.values(RarityConstants)
        .sort((a: Rarity, b: Rarity) => b.SYMBOL.length - a.SYMBOL.length)
        .map((rarity: Rarity) => `${rarity.TEXT}|${rarity.SYMBOL}`)
        .join('|');
    return new RegExp(`(${baseExp})`);
}

/**
 * Regular expression for matching rarity text and symbols.
 *
 * ```js
 * RARITY_REGEX.test('s·¥ò·¥á·¥Ñ…™·¥Ä ü'); // true
 * RARITY_REGEX.test('Œõ'); // true
 * ```
 */
export const RARITY_REGEX = createRegex();

const mappings: Map<string, Rarity> = new Map();
mappings
    .set('·¥Ä ü·¥ò ú·¥Ä', RarityConstants.ALPHA)
    .set(' ô·¥á·¥õ·¥Ä', RarityConstants.BETA)
    .set('…¢·¥Ä·¥ç·¥ç·¥Ä', RarityConstants.GAMMA)
    .set('·¥Ö·¥á ü·¥õ·¥Ä', RarityConstants.DELTA)
    .set('·¥á·¥òs…™ ü·¥è…¥', RarityConstants.EPSILON)
    .set('·¥¢·¥á·¥õ·¥Ä', RarityConstants.ZETA)
    .set('·¥ú ü·¥õ Ä·¥Ä', RarityConstants.ULTRA)
    .set('s·¥Ñ·¥Ä Ä ü·¥á·¥õ', RarityConstants.SCARLET)
    .set('·¥á·¥†·¥á…¥·¥õ', RarityConstants.EVENT)
    .set('s·¥ò·¥á·¥Ñ…™·¥Ä ü', RarityConstants.SPECIAL)
    .set('Œ±', RarityConstants.ALPHA)
    .set('Œ≤', RarityConstants.BETA)
    .set('Œ≥', RarityConstants.GAMMA)
    .set('Œ¥', RarityConstants.DELTA)
    .set('Œµ', RarityConstants.EPSILON)
    .set('Œ∂', RarityConstants.ZETA)
    .set('Œ∂ùì°', RarityConstants.ULTRA)
    .set('‚Ä†', RarityConstants.SCARLET)
    .set('ŒæŒΩ', RarityConstants.EVENT)
    .set('Œõ', RarityConstants.SPECIAL);

/**
 * Resolves the query with the corresponding Rarity object.
 *
 * @param query The query to resolve
 * @returns The corresponding Rarity, null otherwise
 */
export function resolveRarity(query: string): Rarity | null {
    return mappings.get(query) ?? null;
}

/**
 * Checks whether the given rarity contains the VALUE property.
 *
 * @param rarity The rarity to inspect
 * @returns True if the given rarity contains the VALUE property, false otherwise
 */
export function hasRarityValue(rarity: Rarity): rarity is Rarity & { VALUE: number } {
    return rarity.VALUE !== undefined;
}

/**
 * Compares its two rarities for order. Returns a negative integer, zero, or a positive integer as the first argument is
 * less than, equal to, or greater than the second.
 *
 * If both rarities contain the VALUE property, it will be used for comparison. If the first argument only contains the
 * VALUE property, -1 is returned. If the second argument only contains the VALUE property, 1 is returned. If no VALUE
 * property is found on either arguments, 0 is returned.
 *
 * @param a The first rarity to compare
 * @param b The second rarity to compare
 * @returns A negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater
 *   than the second
 */
export function compareRarity(a: Rarity, b: Rarity): number {
    if (hasRarityValue(a) && hasRarityValue(b)) {
        return a.VALUE - b.VALUE;
    } else if (hasRarityValue(a)) {
        return -1;
    } else if (hasRarityValue(b)) {
        return 1;
    } else {
        return 0;
    }
}
