/**
 * Contains the text and symbol for a rarity.
 */
export interface Rarity {
    /**
     * The name of the rarity in latin letter small capitals.
     */
    text: string;
    /**
     * The symbols used to represent the rarity.
     */
    symbol: string;
}

/**
 * Container for all rarities.
 */
export interface RarityContainer {
    ALPHA: Rarity;
    BETA: Rarity;
    GAMMA: Rarity;
    DELTA: Rarity;
    EPSILON: Rarity;
    ZETA: Rarity;
    ULTRA: Rarity;
    SCARLET: Rarity;
    EVENT: Rarity;
    SPECIAL: Rarity;
}

/**
 * Constants for all rarities in LaifuBot.
 */
export const RarityConstants: RarityContainer = {
    ALPHA: {
        text: '·¥Ä ü·¥ò ú·¥Ä',
        symbol: 'Œ±',
    },
    BETA: {
        text: ' ô·¥á·¥õ·¥Ä',
        symbol: 'Œ≤',
    },
    GAMMA: {
        text: '…¢·¥Ä·¥ç·¥ç·¥Ä',
        symbol: 'Œ≥',
    },
    DELTA: {
        text: '·¥Ö·¥á ü·¥õ·¥Ä',
        symbol: 'Œ¥',
    },
    EPSILON: {
        text: '·¥á·¥òs…™ ü·¥è…¥',
        symbol: 'Œµ',
    },
    ZETA: {
        text: '·¥¢·¥á·¥õ·¥Ä',
        symbol: 'Œ∂',
    },
    ULTRA: {
        text: '·¥ú ü·¥õ Ä·¥Ä',
        symbol: 'Œ∂ùì°',
    },
    SCARLET: {
        text: 's·¥Ñ·¥Ä Ä ü·¥á·¥õ',
        symbol: '‚Ä†',
    },
    EVENT: {
        text: '·¥á·¥†·¥á…¥·¥õ',
        symbol: 'ŒæŒΩ',
    },
    SPECIAL: {
        text: 's·¥ò·¥á·¥Ñ…™·¥Ä ü',
        symbol: 'Œõ',
    },
};

function createRegex(): RegExp {
    const baseExp = Object.values(RarityConstants)
        .map((rarity: Rarity) => `${rarity.text}|${rarity.symbol}`)
        .join('|');
    return new RegExp(`(${baseExp})`);
}

/**
 * Regular expression for matching rarity text and symbols.
 *
 * ```js
 * Rarity.REGEX.test('s·¥ò·¥á·¥Ñ…™·¥Ä ü'); // true
 * Rarity.REGEX.test('Œõ'); // true
 * ```
 */
export const RARITY_REGEX = createRegex();

const mappings: Map<string, Rarity> = new Map();
mappings
    .set('·¥Ä ü·¥ò ú·¥Ä', RarityConstants.ALPHA)
    .set(' ô·¥á·¥õ·¥Ä', RarityConstants.BETA)
    .set('…¢·¥Ä·¥ç·¥ç·¥Ä', RarityConstants.GAMMA)
    .set('·¥Ö·¥á ü·¥õ·¥Ä', RarityConstants.DELTA)
    .set('·¥á·¥òs…™ ü·¥è…¥', RarityConstants.EPSILON)
    .set('·¥¢·¥á·¥õ·¥Ä', RarityConstants.ZETA)
    .set('·¥ú ü·¥õ Ä·¥Ä', RarityConstants.ULTRA)
    .set('s·¥Ñ·¥Ä Ä ü·¥á·¥õ', RarityConstants.SCARLET)
    .set('·¥á·¥†·¥á…¥·¥õ', RarityConstants.EVENT)
    .set('s·¥ò·¥á·¥Ñ…™·¥Ä ü', RarityConstants.SPECIAL)
    .set('Œ±', RarityConstants.ALPHA)
    .set('Œ≤', RarityConstants.BETA)
    .set('Œ≥', RarityConstants.GAMMA)
    .set('Œ¥', RarityConstants.DELTA)
    .set('Œµ', RarityConstants.EPSILON)
    .set('Œ∂', RarityConstants.ZETA)
    .set('Œ∂ùì°', RarityConstants.ULTRA)
    .set('‚Ä†', RarityConstants.SCARLET)
    .set('ŒæŒΩ', RarityConstants.EVENT)
    .set('Œõ', RarityConstants.SPECIAL);

/**
 * Resolves the query with the corresponding Rarity object.
 *
 * @param query The query to resolve
 * @returns The corresponding Rarity, null otherwise
 */
export function resolveRarity(query: string): Rarity | null {
    return mappings.get(query) ?? null;
}
